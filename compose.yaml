# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# Docker Compose for Sermon Organizer - Simple setup with no authentication
services:
  server:
    build:
      context: .
      target: backend
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://dev_user:dev_password@db:5432/sermon_organizer_dev
      - MINIMAX_API_KEY=${MINIMAX_API_KEY:-your_minimax_api_key_here}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-your_claude_api_key_here}
      - XAI_API_KEY=${XAI_API_KEY:-your_xai_api_key_here}
    volumes:
      - ./backend:/app/backend:cached
    command: ["python", "-m", "uvicorn", "backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  frontend-dev:
    build:
      context: .
      target: frontend-dev
    ports:
      - 5173:5173
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true

  db:
    image: postgres:15
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=sermon_organizer_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dev_user", "-d", "sermon_organizer_dev"]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  db-data:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

