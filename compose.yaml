# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# Docker Compose for Sermon Organizer - Simple setup with no authentication
services:
  notes-app:
    build:
      context: .
      target: backend
      args:
        - VITE_API_URL=http://localhost:8001
      # Uses production build - builds frontend and serves via FastAPI
    ports:
      - 8001:8000
    depends_on:
      notes-db:
        condition: service_healthy
      bible-cache-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://dev_user:dev_password@notes-db:5432/sermon_organizer_dev
      - BIBLE_CACHE_DATABASE_URL=postgresql://bible_user:bible_password@bible-cache-db:5432/bible_content_cache
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - NLT_API_KEY=${NLT_API_KEY}
      - BIBLE_LICENSE_MODE=${BIBLE_LICENSE_MODE:-personal}
    volumes:
      - ./backend/log_prompts:/app/backend/log_prompts
    restart: unless-stopped
    networks:
      - personal-notes-network

  notes-db:
    image: postgres:15
    restart: always
    volumes:
      - notes-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=sermon_organizer_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dev_user", "-d", "sermon_organizer_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - personal-notes-network

  bible-cache-db:
    image: postgres:15
    restart: always
    volumes:
      - bible-cache-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=bible_content_cache
      - POSTGRES_USER=bible_user
      - POSTGRES_PASSWORD=bible_password
    ports:
      - 5434:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "bible_user", "-d", "bible_content_cache"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - personal-notes-network


volumes:
  notes-db-data:
    external: true
    name: personal-notes_notes-db-data
  bible-cache-data:
    external: true
    name: personal-notes_bible-cache-data

networks:
  personal-notes-network:
    driver: bridge

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

