# Personal Note Manager - Project Overview & Architecture Guide
**Version**: 3.0  
**Date**: 2025-07-23  
**Purpose**: Comprehensive project overview for rapid onboarding and context understanding

## Project Status & Evolution

**Current Status**: Production-ready personal notes manager with advanced AI-powered content organization and comprehensive tag management system.

**Architecture Evolution**:
- ✅ **Phase 1**: Project separation from sermon organizer with single-container setup
- ✅ **Phase 2**: AI service consolidation (Grok-primary/Claude-fallback) with MiniMax elimination  
- ✅ **Phase 3**: LLM-compatible preprocessing and trimming strategy (documented, not implemented)
- ✅ **Phase 4**: Complete tag management system with multi-tag filtering and global content views

## Technical Architecture

### Core Technology Stack
- **Backend**: FastAPI with SQLModel/SQLAlchemy for database operations
- **Frontend**: React 19 with Vite, Zustand state management, Tailwind CSS
- **Database**: PostgreSQL with async connections via asyncpg
- **AI Services**: Grok API (primary) + Claude API (fallback) with automatic failover
- **Deployment**: Single Docker container with external PostgreSQL

### Container Architecture
```
┌─────────────────────────────────────────┐
│ Single Production Container (Port 8001) │
├─────────────────────────────────────────┤
│ Frontend (React) - Built at compile time│
│ Backend (FastAPI) - Serves static files │
│ AI Services (Grok/Claude)               │
└─────────────────────────────────────────┘
         │
         ▼
┌─────────────────────────────────────────┐
│ External PostgreSQL (Port 5433)        │
│ Database: sermon_organizer_dev          │
│ User: dev_user                          │
└─────────────────────────────────────────┘
```

### Key Components & File Structure

**Backend Services**:
- `main.py`: Application entry point with CORS and static file serving
- `api/`: Route modules (sermon_routes.py, storage_routes.py, chat_routes.py)
- `services/`: Business logic (grok_service.py, claude_service.py, storage_service.py, analysis_service.py)

**Frontend Components**:
- `components/Library/LibraryStacks.jsx`: Main content library with advanced filtering
- `components/Library/StudyHall.jsx`: Content creation and editing workspace
- `components/SermonGenerator.jsx`: AI-powered sermon creation tool
- `components/TagBoxes.jsx`: 5-slot categorized tag management system

## Content Management System

### Content Categories & Storage
- **Sermons**: Generated and uploaded sermon content
- **Study Notes**: Personal theological study materials  
- **Research**: Reference materials and academic content
- **Journal**: Personal reflections and devotional content

### File Processing Pipeline
1. **Upload**: Multi-format support (.txt, .md, .docx, .pdf)
2. **Content Extraction**: Automated text extraction and parsing
3. **Bible Reference Detection**: Regex-based scripture reference extraction
4. **AI Analysis**: Automatic theme extraction and content categorization
5. **Storage**: PostgreSQL with metadata and full-text content

### Database Schema (Key Tables)
```sql
content_items:
  - id, title, category, content, passage, tags[]
  - key_themes[], word_count, size_bytes
  - date_created, date_modified, processing_status
  - metadata (bible_references[], processed_at)
```

## AI Integration Architecture

### Dual-Service Strategy
- **Primary**: Grok API (XAI_API_KEY) - Fast, reasoning-capable for all workflows
- **Fallback**: Claude API (CLAUDE_API_KEY) - High-quality backup with automatic retry
- **Automatic Failover**: Seamless service transition with comprehensive logging

### AI Capabilities
- **Sermon Generation**: Long-form content creation with theological depth
- **Content Analysis**: Theme extraction and categorization
- **Bible Reference Detection**: Automatic scripture citation parsing
- **Chat Responses**: Interactive theological discussions

### Prompt Logging Infrastructure
- **Location**: `backend/log_prompts/` (volume-mounted to host)
- **Purpose**: AI interaction tracking for analysis and optimization
- **Format**: Timestamped files with request/response pairs

## Tag Management System (Phase 4 Complete)

### Categorized Tag Architecture
- **Area of Focus** (Green): Theological/topical focus areas (2 slots)
- **Content Purpose** (Blue): Intended use and audience (1 slot)  
- **Tone/Style** (Orange): Communication style and approach (1 slot)
- **Custom** (Purple): User-defined flexible tagging (1 slot)

### Prescriptive Tag Library (24 hardcoded + custom)
**Area of Focus**: Salvation & Grace, Prayer & Worship, Faith & Trust, Love & Relationships, Hope & Comfort, Discipleship & Growth, Scripture Study, Service & Mission

**Content Purpose**: Teaching & Education, Personal Reflection, Evangelism & Outreach, Pastoral Care, Youth Ministry, Small Group Study, Sermon Preparation, Devotional Reading

**Tone/Style**: Expository & Scholarly, Inspirational & Uplifting, Practical & Applicable, Contemplative & Reflective, Conversational & Accessible, Prophetic & Challenging, Narrative & Story-driven, Interactive & Discussion-based

### Advanced Filtering System
- **Multi-Tag Filtering**: 3 independent tag filters with individual AND/OR operators
- **Complex Queries**: Support for "Must have Prayer AND (can have Easter OR Teaching)"
- **Global Content View**: List view shows all categories, grid view shows selected category
- **Visual Consistency**: Category bubbles match across grid and list views

## Development Workflow

### Docker Commands
```bash
# Full rebuild (for frontend changes)
docker compose up --build -d

# Quick restart (backend-only changes)
docker compose restart notes-app

# Clean rebuild
docker compose down && docker compose up --build -d
```

### Access Points
- **Frontend**: http://localhost:8001
- **Backend API**: http://localhost:8001/api/
- **Database**: localhost:5433 (external access)

### Environment Variables
```env
DATABASE_URL=postgresql://dev_user:dev_password@notes-db:5432/sermon_organizer_dev
XAI_API_KEY=<grok-api-key>
CLAUDE_API_KEY=<claude-api-key>
```

## Current Capabilities & Workflows

### LibraryStacks (Content Management)
- **Grid/List Views**: Dual viewing modes with different content scopes
- **Multi-Tag Filtering**: Advanced filtering with 3-tag combinations
- **Tag Editing**: 5-slot color-coded tag system with live editing
- **Global Search**: Cross-category content discovery
- **File Upload**: Drag-and-drop with automatic categorization
- **Active Resources**: Content curation for sermon preparation

### StudyHall (Content Creation)
- **File Upload**: Multi-format content ingestion with AI analysis
- **Content Editing**: Rich text editing with tag management
- **Resource Management**: Active resource loading and organization
- **AI Integration**: Automatic theme extraction and categorization

### SermonGenerator (AI Content Creation)
- **AI-Powered Generation**: Theological content creation with multiple styles
- **Configuration Options**: Length, tone, audience customization
- **Dual AI Backend**: Grok primary with Claude fallback
- **Export Capabilities**: Multiple format output options

## Known Limitations & Future Enhancements

### Bible Reference System
- **Current**: Displays first detected reference, stores all in metadata
- **Future**: Multi-reference display, reference selection UI, enhanced semantic search

### Content Preprocessing (Phase 3 - Documented)
- **Planned**: Intelligent text trimming for LLM optimization
- **Goal**: Token reduction while preserving meaning and structure
- **Approach**: Sentence-level filtering with relevance scoring

### UI/UX Improvements
- **Custom Modal System**: Replace browser alerts/confirms with styled modal components
  - **Current**: Using browser's default `alert()` and `confirm()` dialogs (ugly, inconsistent)
  - **Planned**: Custom modal components matching app color scheme (#654321, #D4A574, brass/wood tones)
  - **Features**: Centered positioning, smooth animations, consistent styling across all confirmations
  - **Scope**: SermonGenerator Clear All, LibraryStacks edit confirmations, error messages, success notifications
  - **Design**: Wood/brass theme with proper shadows, rounded corners, and branded typography

### Performance Optimizations
- **Multi-stage builds**: Optimized Docker layer caching
- **Health checks**: Comprehensive monitoring endpoints  
- **Resource limits**: Memory and CPU constraints
- **Compression**: Text file optimization

## Security & Data Management

### Access Control
- **Current**: Single-user system with no authentication
- **Database**: Strong passwords with localhost-only default access
- **File Storage**: Container-based with volume persistence
- **API Keys**: Environment variable configuration

### Backup Strategy
- **Planned**: NAS integration for automated backups
- **Database**: PostgreSQL data directory mounting
- **Content**: File-based export capabilities

## Integration Points

### External APIs
- **Grok API**: Primary AI service for content generation
- **Claude API**: Fallback AI service for reliability
- **Bible APIs**: Future integration for reference validation

### Data Export/Import
- **Export**: JSON format with full metadata
- **Import**: File upload with automatic processing
- **Migration**: Database schema evolution support

This overview provides comprehensive context for understanding the project architecture, current capabilities, and development patterns. Use this as the primary reference for rapid project onboarding and feature development planning.